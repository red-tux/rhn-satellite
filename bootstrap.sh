#!/bin/bash

HOSTNAME=satellite.example.com

# The following statement can be commented out if desired, however it is not necessary
# as it will not be executed when the default value for HOSTNAME is changed.
if [ "$HOSTNAME" == "satellite.example.com" ]; then
  echo "This script must be edited before it is first used.  The HOSTNAME variable"
  echo "at the top of the script must be set to the appropriate Satellite server for the"
  echo "environment."
  echo "After this variable is changed this message will no longer display."
  exit 1
fi

echo "Generalized RHN Satellite Server Client bootstrap script"

VERSION="20131210a"
# Revision log at the bottom
#
# This file was derived from an autogenerated bootstrap script.
# The bootstrap script can be triggered in one of two ways (the second is preferred):
#
#   (1) centrally, from the RHN Satellite Server via ssh (i.e., from the
#       RHN Satellite Server):
#         cd /var/www/html/pub/
#         cat bootstrap.sh | ssh root@<client-hostname> /bin/bash *options*
#
#   ...or...
#
#   (2) in a decentralized manner, executed on each client, via wget or curl:
#         wget -qO- http://<hostname>/pub/bootstrap.sh | /bin/bash -s - *options*

install_notes()
{
cat << INSTALLNOTESEOF

# INSTALLATION NOTE
# Before the first use of this script, the run-bootstrap script must be run to create 
# the system wide default bootstrap settings and scripts 
# The script should then be placed in the root pub directory of the Satellite server, 
# this way it will not overwrite or interfere with the RHN bootstrap scripts.

# Automatic activation key detection
# This script also has the ability to use a centralized defaults file which can allow 
# for a default activation key based on the text found in /etc/redhat-release.  The path 
# (relative to pub) is pub/bootstrap/activation_defaults.txt.  This file is divided into two 
# columns, the left column is a combination of the /etc/redhat-release file and the 
# running architecture.  The left column is created by capturing the word after "Linux"
# and the number after the word "release".  The number is placed first followed by dash 
# then the word which followed "Linux" followed by another dash and finally the architecture.
# The right column contains the activation key to be used when the left side matches.

# OSAD
# The script will automatically enable and start OSAD if it is found on the system.  The 
# script however will not install OSAD, if OSAD should be installed it should be done 
# via the activation key.  To override this behavior use the "-O" option to disable the 
# starting of OSAD

# Updates
# By default the script will not update the host to the current state of the associated 
# channel.  This option can be overridden by the command line option "-u"

# CA Cert
# If the script told to install the CA via RPM it will first attempt to install the RPM CA 
# bundle via HTTPS, if that fails it will fall back to HTTP.  If that fails it will attempt 
# to fall back to pulling the CA file itself.  If all of those options fail the script will exit 
# with an error code of 1, unless the internal variable USING_SSL is set to 0.  In that 
# case the script will warn and continue.

INSTALLNOTESEOF
}

usage()
{
cat << EOF
Generalized Bootstrap script for joining hosts to a RHN Satellite Server.
By default this script will not update the system after registration.

Version: $VERSION

usage: $0 [options] ativation-key

OPTIONS: (All options negate or alter default behavior)
 -h              Show this message
 -i               Show the Install notes
 -s server       Use <server> as the RHN Satellite Server to register against
                 $HOSTNAME is the default RHN Satellite Server.
 -p profile_name Use <profile_name> as the systems profile name when
                 registering with the RHN Satellite Server.
 -n              Do Not perform a registration for this system
 -u              Perform an update of the system after registration
 -r              Allow remote commands from the RHN Satellite server on this
                 host.
 -c              Allow configuration actions from the RHN Satellite server
                 on this host.
 -O              Do not enable osad if it is installed.
 -D              Detect system and use pre-defined default activation keys.
 -2              Force the use of up2date.  Useful for RHEL4 systems which had
                 yum installed by 3rd party vendors 
EOF
}

CLIENT_OVERRIDES=client-config-overrides.txt

ORG_CA_CERT_RPM=rhn-org-trusted-ssl-cert-1.0-1.noarch.rpm
ORG_CA_CERT_FILE=RHN-ORG-TRUSTED-SSL-CERT
ORG_CA_CERT=$ORG_CA_CERT_RPM
ORG_CA_CERT_IS_RPM_YN=1

USING_SSL=1
USING_GPG=1

REGISTER_THIS_BOX=1

ALLOW_CONFIG_ACTIONS=0
ALLOW_REMOTE_COMMANDS=0

FULLY_UPDATE_THIS_BOX=0

ENABLE_OSAD=1

DETECT_DEFAULT=0

# Set if you want to specify profilename for client systems.
# NOTE: Make sure it's set correctly if any external command is used.
#
# ex. PROFILENAME="foo.example.com"  # For specific clinet system
#     PROFILENAME=`hostname -s`      # Short hostname
#     PROFILENAME=`hostname -f`      # FQDN
#PROFILENAME=""   # Empty by default to let it be set automatically.
PROFILENAME=`hostname -f`   # Empty by default to let it be set automatically.

if (( $? != 0 )); then
  echo "Error detecting hostname"
  echo "'hostname -f' could not determine the FQDN of the host"
  echo 
  echo "Use the '-p <profile_name>' option to provide a profile name"
  echo
  PROFILENAME=""
fi

# Let's parse the options passed in.  If there is an error the usage message is shown 
while getopts "his:p:nurcOD2" OPTION; do
  case $OPTION in
    h)
      usage
      exit 1
      ;;
    i)
      install_notes
      exit 0
      ;;
    s)
      HOSTNAME=$OPTARG
      ;;
    p)
      PROFILENAME=$OPTARG
      ;;
    n)
      REGISTER_THIS_BOX=0
      ;;
    m)
      ALLOW_REMOTE_COMMANDS=1
      ;;
    c)
      ALLOW_CONFIG_ACTIONS=1
      ;;
    O)
      ENABLE_OSAD=0
      ;;
    D)
      DETECT_DEFAULT=1
      ;;
    2)
      echo "Overriding YUM detection, using up2date"
      FORCE_UP2DATE=1
      ;;
    ?)
     usage
     exit 1
  esac
done

#Shift the argument variables left by as many options have been found.
shift $(($OPTIND-1))

#If we don't have one option assume a valid activation key has not been passed in 
if (( $# == 0 )) && (( $DETECT_DEFAULT == 0 )); then
  echo "ERROR: Activation Key not found"
  echo
  usage
  exit 1
fi

#All remaining arguments are activation keys
ACTIVATION_KEYS=$*
ORG_GPG_KEY=

#Remove all spaces and replace with commas
ACTIVATION_KEYS=$(echo $ACTIVATION_KEYS|tr " " ",")

echo "Activation_keys : $ACTIVATION_KEYS"

# an idea from Erich Morisse (of Red Hat).
# use either wget *or* curl
# Also check to see if the version on the # machine supports the insecure mode and format # command accordingly.

if [ -x /usr/bin/wget ] ; then
    output=`LANG=en_US /usr/bin/wget --no-check-certificate 2>&1`
    error=`echo $output | grep "unrecognized option"`
    if [ -z "$error" ] ; then
        FETCH="/usr/bin/wget -q -r -nd --no-check-certificate"
    else
        FETCH="/usr/bin/wget -q -r -nd"
    fi

else
    if [ -x /usr/bin/curl ] ; then
        output=`LANG=en_US /usr/bin/curl -k 2>&1`
        error=`echo $output | grep "is unknown"`
        if [ -z "$error" ] ; then
            FETCH="/usr/bin/curl -SksO"
        else
            FETCH="/usr/bin/curl -SsO"
        fi
    fi
fi
HTTP_PUB_DIRECTORY=http://${HOSTNAME}/pub
HTTPS_PUB_DIRECTORY=https://${HOSTNAME}/pub
if [ $USING_SSL -eq 0 ] ; then
    HTTPS_PUB_DIRECTORY=${HTTP_PUB_DIRECTORY}
fi

#Attempt to determine a default activation key to use based on information 
#about the system. A string based on the RHEL product and version number 
#and architecture is generated and used as a search hash for the file 
#activation_defaults.txt found in the /pub/bootstrap directory on the 
#satellite server.

if [ $DETECT_DEFAULT -eq 1 ]; then
  $FETCH $HTTPS_PUB_DIRECTORY/bootstrap/activation_defaults.txt
  DEFAULT_KEYS=$(cat activation_defaults.txt)
  rm -f activation_defaults.txt
  ARCH=$(uname -p)
  VER=$(cat /etc/redhat-release  | sed 's/^.*Linux \(.*\) release \([0-9]*\).*/\2-\1/' | tr [A-Z] [a-z])
  ACTIVATION_KEYS=$(echo "$DEFAULT_KEYS"| grep "$VER-$ARCH" | cut -d" " -f2)
  if [[ "x$ACTIVATION_KEYS" == "x" ]]; then
    echo "Default Activation key not found."
    echo "Architecture: $ARCH   Version: $VER"
  fi
fi

echo "Activation Key(s): $ACTIVATION_KEYS"

YUM=up2date
if (( "0$FORCE_UPDATE" != 1 )); then
  if [ -x /usr/bin/yum ]; then
    YUM=yum
  fi
else
  echo "Overriding the detection for yum, using up2date"
fi

echo
echo "UPDATING RHN_REGISTER/UP2DATE CONFIGURATION FILES"
echo "-------------------------------------------------"
echo "* downloading necessary files"
echo "  client_config_update.py..."
rm -f client_config_update.py
$FETCH ${HTTPS_PUB_DIRECTORY}/bootstrap/client_config_update.py
echo "  ${CLIENT_OVERRIDES}..."
rm -f ${CLIENT_OVERRIDES}
$FETCH ${HTTPS_PUB_DIRECTORY}/bootstrap/${CLIENT_OVERRIDES}

if [ ! -f "client_config_update.py" ] ; then
    echo "ERROR: client_config_update.py was not downloaded"
    exit 1
fi
if [ ! -f "${CLIENT_OVERRIDES}" ] ; then
    echo "WARNING: ${CLIENT_OVERRIDES} was not downloaded"
    echo "         Press CTRL-C in the next 15 seconds to stop"
    sleep 15
fi

echo "* running the update scripts"
if [ -f "/etc/sysconfig/rhn/rhn_register" ] ; then
    echo "  . rhn_register config file"
    /usr/bin/python -u client_config_update.py /etc/sysconfig/rhn/rhn_register ${CLIENT_OVERRIDES} 
fi 
echo "  . up2date config file"
/usr/bin/python -u client_config_update.py /etc/sysconfig/rhn/up2date ${CLIENT_OVERRIDES}

if [ ! -z "$ORG_GPG_KEY" ] ; then
    echo
    echo "* importing organizational GPG key"
    rm -f ${ORG_GPG_KEY}
    $FETCH ${HTTPS_PUB_DIRECTORY}/${ORG_GPG_KEY}
    # get the major version of up2date
    # this will also work for RHEL 5 and systems where no up2date is installed
    res=$(LC_ALL=C rpm -q --queryformat '%{version}' up2date | sed -e 's/\..*//g')
    if [ "x$res" == "x2" ] ; then
        gpg $(up2date --gpg-flags) --import $ORG_GPG_KEY
    else
        rpm --import $ORG_GPG_KEY
    fi
fi

#Fetch the CA cert from the Satellite server
#1) Set a sentinal variable with the default supposition that the fetch failed (0)
#2) Attempt to fetch the RPM bundled CA via HTTPS (will default to HTTP if USING_SSL==0)
#   Set sentinal variable to 1 if successful
#3) If #2 fails, attempt to fetch the RPM bundled CA with HTTP
#   Set sentinal variable to 1 if successful
#4) If the sentinal variable is 0 attempt to fetch the CA file
#   If the fetch fails and USING_SSL equals 1, exit and display an error
#   If the fetch fails and USING_SSL equals 0, show a warning message

FETCH_CA_CERT_OK=0
echo
echo "* attempting to install corporate public CA cert"
if [ $ORG_CA_CERT_IS_RPM_YN -eq 1 ] ; then
    echo "Installing CA cert via RPM"
    rpm -Uvh --force --replacefiles --replacepkgs ${HTTPS_PUB_DIRECTORY}/${ORG_CA_CERT}
    if [ $? -eq 0 ]; then
      FETCH_CA_CERT_OK=1
    else
      echo "Fetch attempt with HTTPS failed, trying HTTP."
      rpm -Uvh --force --replacefiles --replacepkgs ${HTTP_PUB_DIRECTORY}/${ORG_CA_CERT}
      if [ $? -eq 0 ]; then
        FETCH_CA_CERT_OK=1
      else
        echo "Fetch attempt for CA cert using RPM failed, using fallback"
      fi
    fi
fi
if [ $FETCH_CA_CERT_OK -eq 0 ]; then
#    rm -f ${ORG_CA_CERT}
    echo "Fetching CA cert file"
    $FETCH ${HTTP_PUB_DIRECTORY}/${ORG_CA_CERT_FILE}
    if [ $? -ne 0 ]; then
      if [ $USING_SSL -eq 1 ]; then
        echo "ERROR!"
        echo "Fetch of CA cert failed, exiting"
        exit 1
      else
        echo "WARNING: Fetch of CA cert failed, continuing because USING_SSL==0"
      fi
    fi
    mv ${ORG_CA_CERT_FILE} /usr/share/rhn/
    cp /etc/sysconfig/rhn/up2date /etc/sysconfig/rhn/up2date.bak
    sed -e "s/^\(sslCACert=\/usr\/share\/rhn\/\)/\1${ORG_CA_CERT_FILE}/g" /etc/sysconfig/rhn/up2date
fi

echo
echo "REGISTRATION"
echo "------------"
# Should have created an activation key or keys on the RHN Satellite Server's 
# website and edited the value of ACTIVATION_KEYS above.
#
# If you require use of several different activation keys, copy this file and 
# change the string as needed.
#
if [ -z "$ACTIVATION_KEYS" ] ; then
    echo "*** ERROR: in order to bootstrap RHN clients, an activation key or keys"
    echo "           must be created in the RHN web user interface, and the"
    echo "           corresponding key or keys string (XKEY,YKEY,...) must be mapped to"
    echo "           the ACTIVATION_KEYS variable of this script."
    exit 1
fi

if [ $REGISTER_THIS_BOX -eq 1 ] ; then
    echo "* registering"
    files=""
    directories=""
    if [ $ALLOW_CONFIG_ACTIONS -eq 1 ] ; then
        for i in "/etc/sysconfig/rhn/allowed-actions /etc/sysconfig/rhn/allowed-actions/configfiles"; do
            [ -d "$i" ] || (mkdir -p $i && directories="$directories $i")
        done
        [ -f /etc/sysconfig/rhn/allowed-actions/configfiles/all ] || files="$files /etc/sysconfig/rhn/allowed-actions/configfiles/all"
        [ -n "$files" ] && touch  $files
    fi
    if [ -z "$PROFILENAME" ] ; then
        profilename_opt=""
    else
        profilename_opt="--profilename=$PROFILENAME"
    fi
    if [ -e /etc/sysconfig/rhn/systemid ]; then
      /bin/mv /etc/sysconfig/rhn/systemid /tmp/
#     /usr/bin/yum -y remove rhn-org-trusted-ssl-cert
    fi
    /usr/sbin/rhnreg_ks --force --activationkey="$ACTIVATION_KEYS" --serverUrl=https://$HOSTNAME/XMLRPC $profilename_opt
     if [ "$?" -ne "0" ]; then
      echo "*** ERROR ***"
      echo "Registration failed, perhaps an incorrect activation key?"
      echo "Exiting"
      exit 1
    fi

    [ -n "$files" ] && rm -f $files
    [ -n "$directories" ] && rmdir $(echo $directories | rev)
    echo
    echo "*** this system should now be registered, please verify ***"
    echo
else
    echo "* explicitely not registering"
fi

echo
echo "OTHER ACTIONS"
echo "------------------------------------------------------"
if [ $FULLY_UPDATE_THIS_BOX -eq 1 ] ; then
    if [ "$YUM" == yum ] ; then
        echo "yum -y upgrade yum yum-rhn-plugin; rhn-profile-sync; yum upgrade (conditional)"
    else
        echo "up2date up2date; up2date -p; up2date -uf (conditional)"
    fi
else
    if [ "$YUM" == yum ] ; then
        echo "yum -y upgrade yum yum-rhn-plugin; rhn-profile-sync"
    else
        echo "up2date up2date; up2date -p"
    fi
fi
echo "but any post configuration action can be added here.  "
echo "------------------------------------------------------"
if [ $FULLY_UPDATE_THIS_BOX -eq 1 ] ; then
    echo "* completely updating the box"
else
    echo "* ensuring $YUM itself is updated"
fi
if [ "$YUM" == yum ] ; then
    /usr/bin/yum -y upgrade yum yum-rhn-plugin
    if [ -x /usr/sbin/rhn-profile-sync ] ; then
        /usr/sbin/rhn-profile-sync
    else
        echo "Error updating system info in RHN Satellite."
        echo "    Please ensure that rhn-profile-sync in installed and rerun it."
    fi
    if [ $FULLY_UPDATE_THIS_BOX -eq 1 ] ; then
        /usr/bin/yum -y upgrade
    fi
else
    /usr/sbin/up2date up2date
    /usr/sbin/up2date -p
    if [ $FULLY_UPDATE_THIS_BOX -eq 1 ] ; then
        /usr/sbin/up2date -uf
    fi
fi

#check to see if OSAD was installed
rpm -q osad > /dev/null

if [ $? -eq 0 -a $ENABLE_OSAD -eq 1 ]; then
  echo "Enabling OSAD"
  /etc/init.d/osad start
  /sbin/chkconfig osad on
fi

echo "-bootstrap complete-"

# Version 20130723a
# Andrew Nelson (anelson@redhat.com)
# - Modified fetching of CA cert to fall back to HTTP when HTTPS fails for RPM fetch
#   If RPM fetch fails, fall back to CA file
#   If CA file fetch fails, continue if SSL is not used, exit with an error otherwise
# - Added the option to force the script to use up2date i

# Version 20130723b 
# Andrew Nelson 
# - Minor edits 
# - Added check for unchanged HOSTNAME variable.

# Version 20130724a
# Andrew Nelson
# - Fixed syntax error with yum/up2date override detection.

# Version 20131210a
# Andrew Nelson
# - Modified SSL Certificate installation process to use a text file containing 
#   the SSL CA cert as a backup to the RPM method.

